/**

@page vsm_user_guide Connecting Ardupilot autopilot to UgCS

@section first_time_connecton First time vehicle connection

See @ref vsm_disclaimer.

Please follow these steps to connect an Ardupilot vehicle to the UgCS:

1. Ardupilot vehicle must be properly configured, calibrated and
tested using tools and instruction from the official
[Ardupilot web site](http://www.ardupilot.com) prior to using it with UgCS.
UgCS does not support initial configuration, setup and calibration of Ardupilot
driven vehicles.

2. If more than one Ardupilot vehicle is planned to be used with UgCS, it must
be ensured that each vehicle has a unique system id as defined by the parameter
_SYSID_THISMAV_, otherwise UgCS will not be able to distinguish between different
vehicles and it will not be possible to operate vehicles normally. To change the
parameter, please use the official Ardupilot configuration software like Mission
Planner.

3. Turn on the vehicle and plug in the radio modem paired with the vehicle or
direct USB cable from the Ardupilot board to the computer where VSM is running.
UgCS uses serial ports for communication with Ardupilot vehicles. Standard
communication devices like 3DR radio modems (and their analogs) and direct USB
connections are supported, as long as OS driver for virtual serial port is
installed and serial port is successfully created. Please refer to your
communication equipment manufacturer documentation about driver installation
instructions.

4. As soon as uplink and downlink connection is established, the vehicle should
appear in the active vehicles list in main (map) view. Open _Vehicles_ window
from main menu and choose the corresponding vehicle for editing by clicking on
the menu item and selecting _Edit_ button. Now you can select the vehicle
profile and change the default vehicle name to be convenient for you:
@image html new-ardu-vehicle.png "New Ardupilot vehicle"
@image latex new-ardu-vehicle.png "New Ardupilot vehicle" width=15cm
Vehicle profile needs to be assigned to allow mission planning with this vehicle.
Vehicle avatar should be assigned in vehicle profile to properly see the vehicle
location on map.

5. Repeat steps above for each your Ardupilot vehicle.

Supported vehicle types:
- Copters
- Planes
- VTOL

Supported Ardupilot firmware versions:
- Any version starting from 3.0.0 and up to 3.6.0

@note When working with VTOL vehicles make sure the Q_MAV_TYPE correctly.

@section mission_execution_specifics Mission execution specifics

@note  If one wants to use automatic take-off, it is strongly recommended to place the first waypoint above the actual location of the vehicle. Otherwise the vehicle will reach for the first waypoint in a straight line thus possibly causing danger.

__Mission action support:__
Flight plan element / action | Support | Notes
-----------------------------|---------|---------
Change speed    |  Partial | Changing of flight speed during the mission may work only on latest 3.3.x firmware. See also note on speed below.
Panorama        |  Partial | Only clock-wise movement is supported due to Ardupilot firmware bug. UgCS provides correct angle values according to Mavlink specification.
Set camera mode |  Partial | Only photo mode is supported. See @ref camera_trigger |
Set camera by time | Partial | "First shot delay" parameter is not supported. See note below. |
Set camera by distance | Partial | Only "Distance" parameter is supported. See note below. |
Set camera attitude | Yes | |
Set POI | Yes | |
Change yaw | Yes | |

@subsection trig_by_dist_note1 Camera series by time and by distance
When mission includes a camera series (by time or by distance) action and mission flight is interrupted by issuing any command that interferes with mission (eg. Hold, Click&Go, RTH) during active camera series then
triggering will stop until vehicle reaches the next waypoint with camera trigger action.

@subsection trig_by_dist_note2 Camera series by distance on ArduCopter prior version 3.6
When mission includes a camera series by distance action and mission flight is interrupted by issuing any command that interferes with mission (eg. Hold, Click&Go, RTH) during active camera series then
triggering will go on until "Continue" command is issued and vehicle reaches the next waypoint without camera trigger action.
This is because of Ardupilot limitation which does not allow to stop camera triggering via standalone command.

@subsection speed_mission_note Speed changes in mission
When transiting into route segment with lower required speed autopilot sometimes lowers the speed too much. This is autopilot inefficiency which can be worked around by avoiding large speed differences between waypoints.

@section current_wp Current waypiont

UgCS can report current waypoint vehicle is navigating to. There are two options available for the feature to work:
@ref route_hash and @ref route_download. Both options are disabled by default due to their limitations.

@subsection route_hash Saving route hash on vehicle

When @ref route_hash_param is defined, VSM saves the hash of uploaded route to the vehicle as value of the given parameter.<br>
Possible values: Any valid ardupilot parameter name which does not have enforced limits and is of type float.<br>
Unfortunately, Ardupilot does not provide "user defined" parameters, therefore it is very important to select parameter which
is not used in normal ardupilot operation. If that is not possible then @ref route_download should be considered.<br>
Recommended parameter is RALLY_LIMIT_KM which can be used for this purpose unless "rally points" Ardupilot feature is required. 
See @ref route_hash_param.

@subsection route_download Route download

When enabled, VSM downloads route from the vehicle on each vehicle connect and after each route upload to the vehicle.
This can take significant time when the route is large.
This setting allows to see current waypoint at the expense of doubling route upload time. It should be enabled only if
@ref route_hash is not available. See @ref route_download_param.

@section altitude Altitude

Ardupilot reports two altitude types - AMSL (Above Mean Sea Level) and AHL (Above Home Location). 
UgCS is using only the reported AMSL altitude. In previous versions altitude AHL from Adrupilot was reported as RAW altitude.
It was decided not to show altitude AHL as RAW because it would be inconsistent with other supported autopilots.
Altitude AHL will be added in future versions of UgCS.

Current altitude AGL (Above Ground Level) is calculated as:

_Vehicle altitude AGL = Reported vehicle altitude AMSL - Terrain elevation AMSL at vehicle location_ 

@section home_location Home Location

Home location support differs depending on ArduPilot firmware.

__ArduCopter firmware version up to 3.2.1__

@warning Home location set via mission is ignored by Ardupilot firmware version 3.2.1.

Ardupilot will always override home location with current position at the time of arming.<br>
When "RETURN_HOME" command is issued from UgCS Client or RC transmitter, vehicle will return to the location it was armed at regardless of home location set in mission.

__ArduCopter firmware version 3.3.1 and up__

Mission upload automatically sets Home location. There are several restrictions on Home location:

- Home location can be set only while enough GPS satellites are visible.

- Home location should be close to current location (within 50km)

Mission will fail to upload if any of the above conditions do not hold.

@note Home location altitude is always 0m AGL (Above Ground Level). I.e. Vehicle must be launched from the ground level. This is a limitation of UgCS software and will be removed in future versions. 


@subsection home_location_land Landing at Home Location

Vehicle behavior after returning at Home Location depends on on the configuration parameter RTL_ALT_FINAL:

- RTL_ALT_FINAL == 0: Vehicle will land automatically
- RTL_ALT_FINAL > 0: Vehicle will descend to given altitude (in centimeters) and hover there waiting for user control.

The RTL_ALT_FINAL can be overridden in config file. See @ref rtl_alt_final. 

@note RTL_ALT_FINAL parameter can be set using MissionPlanner software.


@section command_execution_specifics Command execution specifics

Command        | Support  | Notes
---------------|----------|---------
ARM            |  Yes     | Arms vehicle. |
DISARM         |  Yes     | Disarms vehicle. For copter this works only when vehicle is on the ground. |
AUTOMODE       |  Yes     | Start mission from first waypoint. Sets vehicle into _Auto_ flight mode. |
MANUALMODE     |  Yes     | Sets _Manual_ mode. It's @b LOITER for multicopter frames and @b STABILIZE for fixed wing. |
CLICK & GO     |  Yes     | Sets _Click & Go_ (single waypoint) mode. |
JOYSTICK       |  Yes     | Sets _Joystick mode_. See also @ref joystick below. |
HOLD           |  Yes     | Pause mission execution. The drone will loiter at its current position. |
CONTINUE       |  Yes     | Continue with mission execution from next waypoint. Works from _Manual_, _Joystick_ and _Click&Go_ modes. If mission is already completed then vehicle will restart the mission.|
RETURN HOME    |  Yes     | Vehicle will return to home location. See also @ref home_location. |
TAKEOFF        |  Yes     | |
LAND           |  Yes     | |
EMERGENCYLAND  |  No      | |
CAMERA_TRIGGER |  Yes     | See @ref camera_trigger for details|
MISSION_CLEAR  |  Yes     | Deletes current route from vehicle|

@section camera_trigger Camera trigger command

There are two (mutually exclusive) ways to trigger camera on Ardupilot.

1) By default camera triggering done via DO_DIGICAM_CONTROL command.<br>
This allows trigger by distance (typically used in aerial photo missions) and single shot. Trigger by time WP action is not possible with this command.<br>
Camera interface must be configured via MissionPlanner or via "vehicle.ardupilot.parameter" settings before this command can be used.<br>
Make sure that SERVO*_FUNCTION is set to 10 (camera trigger).
Please refer to Ardupilot manual for details at http://ardupilot.org/copter/docs/common-camera-shutter-with-servo.html#shutter-configuration-with-pixhawk.

2) If camera trigger by time in mission is required then it should be specially configured via vehicle.ardupilot.camera_servo_idx parameter in vsm-ardupilot.conf.<br>
For configuration parameters see @ref camera_control_params.<br>
In this case camera is triggered via DO_REPEAT_SERVO command.
This allows trigger by time and single shot. Trigger by distance WP action is not possible with this command.<br>
When camera trigger command is issued then the specified servo is moved to the value specified by
camera_servo_pwm and held there for the half of the specified interval. The servo then moves back to
the value specified by the corresponding RC<camera_servo_idx>_TRIM parameter.
Make sure that SERVO<camera_servo_idx>_FUNCTION is set to 0 (servo controlled by mission).
Both parameters RC_TRIM and SERVO_FUNCTION should be configured via MissionPlanner or via "vehicle.ardupilot.parameter" settings.

3) Usage of both camera trigger actions "by time" and "by distance" in the same mission is not supported.

@section autopilot_variables Autopilot parameters

There is a number of MAVlink parameters which are changed on the autopilot during operation.
Some parameters are set on first vehicle connect, some are set during route upload and command execution.
Any mavlink parameter supported by the autopilot can be set on vehicle connect using conf file setting "vehicle.ardupilot.parameter" 

@subsection common_variables Parameters common for fixed wing and copters

Parameter | Description
---|---
GND_ALT_OFFSET  | Modified if set_ground_alt_offset is set to yes. See also @ref set_ground_alt_offset
MIS_RESTART     | Modified during commands AUTO and CONTINUE
RALLY_LIMIT_KM  | Used to keep the hash of uploaded route. See also @ref route_hash

@subsection copter_variables Copter parameters

Parameter | Description
---|---
BATT_FS_LOW_ACT | Modified if route parameters sets failsafe action on low battery. 
FS_EKF_ACTION   | Modified if route parameters sets failsafe action on GPS signal loss. 
FS_THR_ENABLE   | Modified if route parameters sets failsafe action on RC signal loss.
RTL_ALT         | Modified if route parameters sets Emergency return altitude.
WP_YAW_BEHAVIOR | Set to 0 if autoheading is set to yes. See also @ref heading_control

@subsection plane_variables Plane and VTOL parameters

Parameter | Description
---|---
ALT_HOLD_RTL    | Set if route parameters sets Emergency return altitude.
TRIM_ARSPD_CM   | Modified when Click&Go command issued on the vehicle.
LAND_FLARE_ALT  | Set if vehicle profile has "Landing flare altitude" specified. 
LAND_FLARE_SEC  | Set if vehicle profile has "Landing flare time" specified.
LAND_PITCH_CD   | Set if vehicle profile has "Minimum landing pitch" specified.
TECS_LAND_DAMP  | Set if vehicle profile has "Controller sink rate to pitch gain during flare" specified.
TECS_LAND_ARSPD | Set if vehicle profile has "Airspeed during landing approach" specified.
TECS_LAND_SPDWGT| Set if vehicle profile has "Weighting applied to speed control during landing" specified.
TECS_PITCH_MAX  | Set if vehicle profile has "Maximum pitch in auto flight" specified.
LIM_PITCH_MAX   | Set if vehicle profile has "Maximum pitch" specified.
THR_MIN         | Set if vehicle profile has "Minimum throttle" specified.
TECS_LAND_SINK  | Set if vehicle profile has "Landing sink rate" specified.
RNGFND_LANDING  | Set if vehicle profile has "Enable rangefinder for landing" specified.
RNGFND_MIN_CM   | Set if vehicle profile has "Minimum rangefinder distance" specified.

@section adsb_rx ADSB receiver support

Ardupilot supports connection with <a href="http://www.uavionix.com/products/pingrx">PingRX ADS-B receiver</a> from uAvionix.
Please refer to <a href="http://ardupilot.org/copter/docs/common-ads-b-receiver.html">Ardupilot docs</a> for details on hardware setup.
UgCS will receive the ADSB messages from autopilot and show detected vehicles in client GUI.

@section joystick Joystick support

Ardupilot can be put into Joystick mode which allows user to manually control the vehicle in similar way to RC transmitter.
Please note that Joystick mode is inherently more fragile than direct manual control via RC transmitter because it involves many different data links and components:

Joystick device --> UgCS client --> server --> VSM --> Ground Radio --> Air Radio --> Autopilot

If any of the above links fail, the joystick control is broken and vehicle automatically goes into manual mode. (Loiter for copters and Stabilize for planes)
This is why user should be very careful when working with Joystick control mode.
It is recommended to have RC transmitter as backup controller.

@note One specific Ardupilot firmware version 3.4.3 does not support Joystick mode. 

@note Joystick control mode is disabled by default for fixed wing frames.
To enable Joystick mode for planes please refer to section @ref joystick_control_params.

@section commands_shading Command shading

UGCS Client can show command buttons in different shades. You can always press all buttons disregarding of shade. Highlighted buttons suggest recommended commands, depending on vehicle current status.

__Command shading__

State		| Button highlighted | Button shaded |
------------|--------------------|---------------
Armed		| DISARM, AUTOMODE, MANUALMODE, LAND, RETURNHOME, CLICK-GO, JOYSTICK, HOLD, CONTINUE | ARM |
Disarmed	| ARM | DISARM, AUTOMODE, MANUALMODE, LAND, RETURNHOME, CLICK-GO, JOYSTICK, HOLD, CONTINUE |

@section telemetry_info Telemetry information specifics

@subsection air_speed Air speed
If there is no air speed sensor onboard, air speed will be shown as "Not available". If there is an air speed sensor onboard, the air speed value will be shown.

@subsection rc_link_quality RC link quality
Ardupilot reports RC link loss correctly only when throttle failsafe is activated.
- Throttle failsafe must be configured. (Set parameter FS_THR_ENABLE to nonzero and configure throttle channel to go below FS_THR_VALUE on RC link loss)
- Ardupilot reports RC link correctly only while armed. If RC signal is lost while vehicle is disarmed it will still appear as 100%. (This is Ardupilot firmware limitation)
- RC link quality is available only for multicopter and heli firmware (ArduCopter). Fixed wing (ArduPlane) and rover (ArduRover) does not report RC link status.

@section fail-safe Fail-safe actions

Route-specific fail safe settings can be set for ArduCopter.

__GPS Lost:__
Action		   |Result
---------------|-------------------|
Wait			| Aircraft tries to maintain altitude|
Land			| Aircraft lands even if in loiter mode|

__RC Lost:__
Action		   |Result
---------------|-------------------|
Wait			| Aircraft changes altitude to failsafe alt. (set via MissionPlanner) and returns home|
Land			| Aircraft lands even if in loiter mode|
Return Home		| Aircraft changes altitude to failsafe alt. (set via MissionPlanner) and returns home|
Continue		| Aircaft continues mission|

__Battery Low:__
Action		   |Result
---------------|-------------------|
Wait			| Aircraft changes altitude to failsafe alt. (set via MissionPlanner) and returns home|
Land			| Aircraft changes altitude to failsafe alt. (set via MissionPlanner) and returns home|
Return Home		| Aircraft changes altitude to failsafe alt. (set via MissionPlanner) and returns home|
Continue		| Aircaft continues mission|

@warning UgCS does not support failsafe settings for ArduPlane. Please use Mission Planner of QGC to modify ArduPlane failsafe settings.  

__Datalink loss:__

Failsafe actions on datalink loss not supported.

@section turn_type_specifics Waypoint turn types

UgCS supports two turn types for VTOL vehicles (Multicopter and Heli): Straight waypoint and Spline waypoint. 
You can choose turn type for each Waypoint, Circle, Perimeter. The default turn mode in the system is Straight type.

@image html turn-mode.png "Turn type"
@image latex turn-mode.png "Turn type" width=10cm

Turn type          | Support  | Notes
-------------------|----------|---------
Straight           |  Yes     | The vehicle will fly a straight line to the location specified as a lat, lon and altitude. |
Spline             |  Yes     | The vehicle will fly to the location specified as a lat, lon and altitude, but when executed the vehicle will fly smooth paths (both vertically and horizontally) instead of straight lines. |

@note  
 - When using Spline turn type make sure the line segment after the waypoint is long enough otherwise autopilot can fly unexpectedly missing some waypoints.
What is "long enough"? The desired segment length varies with speed.
Our tests show that with ground speed 5m/s route segment must be at least 20m long. If speed is set to 10m/s then route segment after the waypoint should be at least 50 meters.

@note 
 - Different turn types for fixed wing vehicles are not supported.

You can find more information about turning mode and supporting autopilots on the sites:
 - https://github.com/diydrones/apm_planner/issues/274
 - http://copter.ardupilot.com/wiki/mission-command-list/#spline_waypoint

@section zigbee_connection Connection using ZigBee interface

There is a possibility to connect UgCS to Ardupilot vehicle using ZigBee
interface. Connection is performed with two or more Digi XBee ZigBee modules (one
on ground side, others on vehicles side) and dedicated UgCS software component
called XBee Connector. Please refer to XBee Connector user guide for details.

In order to use such kind of connection you are to disable
@ref serial_port_parameters and enable @ref proxy_parameters.


@section config_file_parameters_section Configuration file

Default configuration file of the Ardupilot VSM suits most needs and it is
generally not necessary to modify it.

Configuration file location:
         
- <b>On Microsoft Windows:</b>

         C:\Program Files (x86)\UgCS\bin\vsm-ardupilot.conf

- <b>On GNU/Linux:</b>

         /etc/opt/ugcs/vsm-ardupilot.conf
         
- <b>On Apple OS X:</b>

          /Users/[user name]/Library/Application Support/UGCS/configuration/vsm-ardupilot.conf

@subsection common_params_section Common parameters

All VSMs share a common set of configuration file parameters described in
@ref common_config_file_params. Ardupilot VSM configuration file prefix is:

    vehicle.ardupilot

@subsection connection_spec Communication channel configuration

There must be at least one communication channel defined, otherwise VSM will not
try to connect to the vehicle. See @ref vsm_comm_setup for details

Default installation is configured to detect autopilot automatically on
any available serial port at 57600 or 115Kbps.

@subsection model_override_params Model name and serial number override

Optional.

- @b Name: vehicle.ardupilot.custom.[name].system_id = [system id]
- @b Name: vehicle.ardupilot.custom.[name].model_name = [model name]
- @b Name: vehicle.ardupilot.custom.[name].serial_number = [serial number]
- @b Description: In UgCS each vehicle is identified by a unique combination of
model name and serial number represented as text strings. By default, Ardupilot
vehicles are identified with a model name _Ardupilot_ and serial number equal with
the Mavlink system id read from the vehicle. It can be overridden by these
parameters, where [name] is an arbitrary vehicle name, [system id] is the
original Mavlink system id which should be overridden, [model name] is a new
model name to be visible to the UgCS, [serial number] is a new serial number to
be visible to the UgCS.
- @b Example:

        vehicle.ardupilot.custom.my_drone.system_id = 2
        vehicle.ardupilot.custom.my_drone.model_name = ArducopterQuad
        vehicle.ardupilot.custom.my_drone.serial_number = 123456

@subsection camera_control_params Camera control parameters

Camera trigger parameters. See also @ref camera_trigger.

- @b Name: vehicle.ardupilot.camera_servo_idx
- @b Default: None. camera trigger is controlled via DO_DIGICAM_CONTROL command.
- @b Description: Index of the servo to use for camera triggering.
- @b Example (Use 8th servo output as camera trigger):

         vehicle.ardupilot.camera_servo_idx = 8
         
- @b Name: vehicle.ardupilot.camera_servo_pwm
- @b Default: Value from CAM_SERVO_ON parameter.
- @b Description: PWM value to set for camera triggering servo when taking photo.
- @b Example:

         vehicle.ardupilot.camera_servo_pwm = 1900
         
- @b Name: vehicle.ardupilot.camera_servo_time
- @b Default: Value from CAM_DURATION parameter.
- @b Description:  Time to hold camera servo at the specified PWM when triggering single photo in seconds. After that time servo will return to the RC<camera_servo_idx>_TRIM value. This value is used only in single shot command. WP action camera_trigger_by_time provides its own interval.
- @b Example:

         vehicle.ardupilot.camera_servo_time = 1.0

@subsection joystick_control_params Joystick control parameters

Optional. By default joystick control mode is disabled for fixed wing frames due to safety reasons.
Add vehicle.ardupilot.enable_joystick_control_for_fixed_wing to enable joystick control for fixed wing vehicles, too.

- @b Name: vehicle.ardupilot.enable_joystick_control_for_fixed_wing
- @b Description: Enable joystick control for fixed wing vehicles.
- @b Default: no
- @b Example:

         vehicle.ardupilot.enable_joystick_control_for_fixed_wing = yes

@subsection report_relative_altitude Report relative altitude

Optional. By default Ardupilot VSM will report relative altitude as RAW altitude because it is more precise than GPS altitude.
For some installations GPS altitude from vehicle is more appropriate, e.g. when RTK GPS is used.

- @b Name: vehicle.ardupilot.report_relative_altitude
- @b Description: Enable/Disable reporting of relative altitude in telemetry.
- @b Default: yes
- @b Example:

         vehicle.ardupilot.report_relative_altitude = no
         
@subsection set_ground_alt_offset Set ground altitude offset

Optional. By default Ardupilot VSM will set altitude offset so that uploaded Home Location altitude corresponds to reported raw altitude 0 m. 

- @b Name: vehicle.ardupilot.set_ground_alt_offset
- @b Description: Enable/Disable Setting altitude offset on route upload.
- @b Default: yes
- @b Example:

         vehicle.ardupilot.set_ground_alt_offset = no
         
@subsection heading_control Vehicle heading control

Optional. Forces heading to next waypoint.<br>
yes - Change heading towards next waypoint. When set, each mission upload sets WP_YAW_BEHAVIOR to zero (yaw controlled by mission) and generates additional mission item MAV_CMD_CONDITION_YAW before each WP so that vehicle will point always to the next WP.<br> 
no - Do not force change heading between waypoints. This disables override of parameter WP_YAW_BEHAVIOR on mission upload. So the vehicle heading control is defined by current setting of WP_YAW_BEHAVIOR.

- @b Name: vehicle.ardupilot.autoheading
- @b Description: Enable/Disable generation of automatic heading change to next WP during route upload.
- @b Default: yes
- @b Example:

         vehicle.ardupilot.autoheading = no
         
@subsection telem_rate Telemetry rate configuration

Ardupilot VSM supports setting custom telemetry rate to manage datalink channel bandwidth.
Rate of 1 produces ~350 bytes/sec of telemetry traffic.
56K radiolink in ideal conditions can sustain the telemetry_rate = 5. Higher telemetry rates are not recommended and should be tried only with fast datalinks.

- @b Required: No.
- @b Supported @b values: 1 - 50
- @b Default: 2
- @b Description: Set update frequency for vehicle state information (attitude, position, battery, etc...)
- @b Example:

        vehicle.ardupilot.telemetry_rate = 1

@subsection ignore_speed Ignore route speed settings

Use this to disable all speed changes defined in route. Vehicle will fly with default speed the whole route.   

- @b Required: No.
- @b Supported @b values: yes, no
- @b Default: no
- @b Example:

        vehicle.ardupilot.ignore_speed_in_route = yes

@subsection route_download_param Enable route download

Enable route download from the vehicle. See @ref route_download for details. 

- @b Required: No.
- @b Supported @b values: yes/no
- @b Default: no
- @b Example:

        vehicle.ardupilot.enable_route_download = yes

@subsection route_hash_param Route hash parameter name

Enable saving of route hash on the vehicle. See @ref route_hash for details. 
- @b Required: No.
- @b Supported @b values: yes/no
- @b Default: Not set.
- @b Example:

        vehicle.ardupilot.route_hash_parameter = RALLY_LIMIT_KM


@subsection mavlink_injection Mavlink message injection

Ardupilot VSM can receive mavlink packets and forward them to the vehicle if vehicle with specified target_id is connected. It can be used to send GPS RTK corrections to vehicles.
If message has no target_id or traget_id is 0 then it is sent to all connected vehicles.
Supported messages are: COMMAND_LONG, COMMAND_INT, GPS_INJECT_DATA and GPS_RTCM_DATA. 
The prefix mavlink_injection supports all the same syntax as "connection" prefix.

- @b Required: No.
- @b Supported @b values: Same as those for connection prefix.
- @b Default: Not set.
- @b Example:

        mavlink.injection.udp_any.1.local_port = 44444


@subsection mavlink_sysid Mavlink System ID

MAVlink System ID used for outgoing MAVlink messages.

- @b Required: No.
- @b Supported @b values: 1 - 255
- @b Default: 255.
- @b Example:

        mavlink.vsm_system_id = 100


@subsection mavlink_compid Mavlink Component ID

MAVlink Component ID used for outgoing MAVlink messages.

- @b Required: No.
- @b Supported @b values: 0 - 255
- @b Default: 0
- @b Example:

        mavlink.vsm_component_id = 190


@subsection protocol_version Mavlink protocol version

MAVlink Protocol version used for messages generated on VSM. There are three options:<br>
1 - Always use MAVLINK1 (default)<br>
2 - Always use MAVLINK2<br>
auto - Detect autopilot capabilities and use MAVLINK2 if autopilot reports MAV_PROTOCOL_CAPABILITY_MAVLINK2<br>

- @b Required: No.
- @b Supported @b values: 1, 2, auto
- @b Default: 1
- @b Example:

        mavlink.protocol_version = 2

@subsection disarm_delay DISARM_DELAY parameter

- @b Required: No.
- @b Supported @b values: 0 - 127
- @b Default: Do not set
- @b Description: Configure the delay after which vehicle automatically disarms if on the ground. 0 - disable the disarm timer.
- @b Example:

        vehicle.ardupilot.parameter.DISARM_DELAY = 5

@subsection rtl_alt_final RTL_ALT_FINAL parameter

- @b Required: No.
- @b Supported @b values: Any positive integer
- @b Default: Do not set
- @b Unit: centimeter
- @b Description: Set the final altitude in cm the vehicle will hover at after "Return To Home". 
Vehicle will land if set to 0.
- @b Example: Hover at 5m altitude after RTH.

        vehicle.ardupilot.parameter.RTL_ALT_FINAL = 500

*/
